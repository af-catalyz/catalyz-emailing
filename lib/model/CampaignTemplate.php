<?php


/**
 * Skeleton subclass for representing a row from the 'campaign_template' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * jeu. 03 mai 2012 11:26:44 CEST
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class CampaignTemplate extends BaseCampaignTemplate {

	/**
	 * Initializes internal state of CampaignTemplate object.
	 * @see        parent::__construct()
	 */
	public function __construct()
	{
		// Make sure that parent constructor is always invoked, since that
		// is where any default values for this object are set.
		parent::__construct();
	}

	public function getStatusBadge($floatRight = true){
		$badge = '';

		if ($this->getClassName()) {
			$badge = sprintf('<span class="label label-success%s">%s</span>', $floatRight?' pull-right':'',sfContext::getInstance()->getI18N()->__('Mode AssistÃ©'));
		}

		return $badge;
	}

	function updateImageUrl($zip)
	{
		$path = sprintf('%s/uploads/campaign-templates/%s', sfConfig::get('app_app_url'), $this->getId());

		$content = $this->getTemplate();

		$patterns = array();
		$replacement = array();

		if (preg_match_all('|src="(?P<src>[^"]*)"|si', $content, $matchElements)) {
			foreach ($matchElements[0] as $key => $element) {
				if (preg_match('/(jpg|gif|png|css)$/', strtolower($matchElements['src'][$key]))) {
					if ($zip) {
						$image = $matchElements['src'][$key];
					}else {
						$tokens = explode('/', $matchElements['src'][$key]);
						$image = array_pop($tokens);
					}

					$patterns[] = $element;
					$replacement[] = sprintf('src="%s/%s"', $path, $image);
				}
			}
		}

		if (preg_match_all('|href="(?P<target>[^"]*)"|si', $content, $matchElements)) {
			foreach ($matchElements[0] as $key => $element) {
				if (preg_match('/(css|pdf)$/', strtolower($matchElements['target'][$key]))) {
					$tokens = explode('/', $matchElements['target'][$key]);
					$image = array_pop($tokens);
					$patterns[] = $element;
					$replacement[] = sprintf('href="%s/%s"', $path, $image);
				}
			}
		}

		$content = str_replace($patterns, $replacement, $content);

		$this->setTemplate($content);
		$this->save();

		return true;
	}

	public function createEditWidget(Campaign $campaign)
	{
		$result = array();

		if ('' == $this->getClassName() || !class_exists($this->getClassName())) {
			$className = 'CampaignTemplateHandler';
		} else {
			$className = $this->getClassName();
		}

		$object = new $className($campaign);
		$result = $object->createEditWidget();

		return $result;
	}

} // CampaignTemplate


$columns_map = array('from'   => CampaignTemplatePeer::NAME,'to'     => CampaignTemplatePeer::SLUG);
sfPropelBehavior::add('CampaignTemplate', array('sfPropelActAsSluggableBehavior' => array('columns' => $columns_map)));