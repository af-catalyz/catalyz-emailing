<?php

/**
 * Base class that represents a row from the 'campaign' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * ven. 28 juin 2013 16:29:56 CEST
 *
 * @package    lib.model.om
 */
abstract class BaseCampaign extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CampaignPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the slug field.
	 * @var        string
	 */
	protected $slug;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the commentaire field.
	 * @var        string
	 */
	protected $commentaire;

	/**
	 * The value for the subject field.
	 * @var        string
	 */
	protected $subject;

	/**
	 * The value for the template_id field.
	 * @var        int
	 */
	protected $template_id;

	/**
	 * The value for the content field.
	 * @var        string
	 */
	protected $content;

	/**
	 * The value for the prepared_content field.
	 * @var        string
	 */
	protected $prepared_content;

	/**
	 * The value for the text_content field.
	 * @var        string
	 */
	protected $text_content;

	/**
	 * The value for the prepared_text_content field.
	 * @var        string
	 */
	protected $prepared_text_content;

	/**
	 * The value for the status field.
	 * @var        int
	 */
	protected $status;

	/**
	 * The value for the from_name field.
	 * @var        string
	 */
	protected $from_name;

	/**
	 * The value for the from_email field.
	 * @var        string
	 */
	protected $from_email;

	/**
	 * The value for the scheduled_at field.
	 * @var        string
	 */
	protected $scheduled_at;

	/**
	 * The value for the schedule_type field.
	 * @var        int
	 */
	protected $schedule_type;

	/**
	 * The value for the test_type field.
	 * @var        int
	 */
	protected $test_type;

	/**
	 * The value for the test_user_list field.
	 * @var        string
	 */
	protected $test_user_list;

	/**
	 * The value for the target field.
	 * @var        string
	 */
	protected $target;

	/**
	 * The value for the reply_to_email field.
	 * @var        string
	 */
	protected $reply_to_email;

	/**
	 * The value for the return_path_email field.
	 * @var        string
	 */
	protected $return_path_email;

	/**
	 * The value for the return_path_server field.
	 * @var        string
	 */
	protected $return_path_server;

	/**
	 * The value for the return_path_login field.
	 * @var        string
	 */
	protected $return_path_login;

	/**
	 * The value for the return_path_password field.
	 * @var        string
	 */
	protected $return_path_password;

	/**
	 * The value for the is_archived field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $is_archived;

	/**
	 * The value for the google_analytics_enabled field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $google_analytics_enabled;

	/**
	 * The value for the google_analytics_source field.
	 * @var        string
	 */
	protected $google_analytics_source;

	/**
	 * The value for the google_analytics_medium field.
	 * @var        string
	 */
	protected $google_analytics_medium;

	/**
	 * The value for the google_analytics_campaign_type field.
	 * @var        int
	 */
	protected $google_analytics_campaign_type;

	/**
	 * The value for the google_analytics_campaign_content field.
	 * @var        string
	 */
	protected $google_analytics_campaign_content;

	/**
	 * The value for the google_analytics_content field.
	 * @var        string
	 */
	protected $google_analytics_content;

	/**
	 * The value for the litmus_test_id field.
	 * @var        string
	 */
	protected $litmus_test_id;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the created_by field.
	 * @var        int
	 */
	protected $created_by;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        CampaignTemplate
	 */
	protected $aCampaignTemplate;

	/**
	 * @var        sfGuardUserProfile
	 */
	protected $asfGuardUserProfile;

	/**
	 * @var        array CampaignContactGroup[] Collection to store aggregation of CampaignContactGroup objects.
	 */
	protected $collCampaignContactGroups;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCampaignContactGroups.
	 */
	private $lastCampaignContactGroupCriteria = null;

	/**
	 * @var        array CampaignContact[] Collection to store aggregation of CampaignContact objects.
	 */
	protected $collCampaignContacts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCampaignContacts.
	 */
	private $lastCampaignContactCriteria = null;

	/**
	 * @var        array CampaignContactElement[] Collection to store aggregation of CampaignContactElement objects.
	 */
	protected $collCampaignContactElements;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCampaignContactElements.
	 */
	private $lastCampaignContactElementCriteria = null;

	/**
	 * @var        array CampaignLink[] Collection to store aggregation of CampaignLink objects.
	 */
	protected $collCampaignLinks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCampaignLinks.
	 */
	private $lastCampaignLinkCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'CampaignPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->is_archived = 0;
		$this->google_analytics_enabled = false;
	}

	/**
	 * Initializes internal state of BaseCampaign object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [slug] column value.
	 * 
	 * @return     string
	 */
	public function getSlug()
	{
		return $this->slug;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [commentaire] column value.
	 * 
	 * @return     string
	 */
	public function getCommentaire()
	{
		return $this->commentaire;
	}

	/**
	 * Get the [subject] column value.
	 * 
	 * @return     string
	 */
	public function getSubject()
	{
		return $this->subject;
	}

	/**
	 * Get the [template_id] column value.
	 * 
	 * @return     int
	 */
	public function getTemplateId()
	{
		return $this->template_id;
	}

	/**
	 * Get the [content] column value.
	 * 
	 * @return     string
	 */
	public function getContent()
	{
		return $this->content;
	}

	/**
	 * Get the [prepared_content] column value.
	 * 
	 * @return     string
	 */
	public function getPreparedContent()
	{
		return $this->prepared_content;
	}

	/**
	 * Get the [text_content] column value.
	 * 
	 * @return     string
	 */
	public function getTextContent()
	{
		return $this->text_content;
	}

	/**
	 * Get the [prepared_text_content] column value.
	 * 
	 * @return     string
	 */
	public function getPreparedTextContent()
	{
		return $this->prepared_text_content;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     int
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [from_name] column value.
	 * 
	 * @return     string
	 */
	public function getFromName()
	{
		return $this->from_name;
	}

	/**
	 * Get the [from_email] column value.
	 * 
	 * @return     string
	 */
	public function getFromEmail()
	{
		return $this->from_email;
	}

	/**
	 * Get the [optionally formatted] temporal [scheduled_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getScheduledAt($format = 'Y-m-d H:i:s')
	{
		if ($this->scheduled_at === null) {
			return null;
		}


		if ($this->scheduled_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->scheduled_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->scheduled_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [schedule_type] column value.
	 * 
	 * @return     int
	 */
	public function getScheduleType()
	{
		return $this->schedule_type;
	}

	/**
	 * Get the [test_type] column value.
	 * 
	 * @return     int
	 */
	public function getTestType()
	{
		return $this->test_type;
	}

	/**
	 * Get the [test_user_list] column value.
	 * 
	 * @return     string
	 */
	public function getTestUserList()
	{
		return $this->test_user_list;
	}

	/**
	 * Get the [target] column value.
	 * 
	 * @return     string
	 */
	public function getTarget()
	{
		return $this->target;
	}

	/**
	 * Get the [reply_to_email] column value.
	 * 
	 * @return     string
	 */
	public function getReplyToEmail()
	{
		return $this->reply_to_email;
	}

	/**
	 * Get the [return_path_email] column value.
	 * 
	 * @return     string
	 */
	public function getReturnPathEmail()
	{
		return $this->return_path_email;
	}

	/**
	 * Get the [return_path_server] column value.
	 * 
	 * @return     string
	 */
	public function getReturnPathServer()
	{
		return $this->return_path_server;
	}

	/**
	 * Get the [return_path_login] column value.
	 * 
	 * @return     string
	 */
	public function getReturnPathLogin()
	{
		return $this->return_path_login;
	}

	/**
	 * Get the [return_path_password] column value.
	 * 
	 * @return     string
	 */
	public function getReturnPathPassword()
	{
		return $this->return_path_password;
	}

	/**
	 * Get the [is_archived] column value.
	 * 
	 * @return     int
	 */
	public function getIsArchived()
	{
		return $this->is_archived;
	}

	/**
	 * Get the [google_analytics_enabled] column value.
	 * 
	 * @return     boolean
	 */
	public function getGoogleAnalyticsEnabled()
	{
		return $this->google_analytics_enabled;
	}

	/**
	 * Get the [google_analytics_source] column value.
	 * 
	 * @return     string
	 */
	public function getGoogleAnalyticsSource()
	{
		return $this->google_analytics_source;
	}

	/**
	 * Get the [google_analytics_medium] column value.
	 * 
	 * @return     string
	 */
	public function getGoogleAnalyticsMedium()
	{
		return $this->google_analytics_medium;
	}

	/**
	 * Get the [google_analytics_campaign_type] column value.
	 * 
	 * @return     int
	 */
	public function getGoogleAnalyticsCampaignType()
	{
		return $this->google_analytics_campaign_type;
	}

	/**
	 * Get the [google_analytics_campaign_content] column value.
	 * 
	 * @return     string
	 */
	public function getGoogleAnalyticsCampaignContent()
	{
		return $this->google_analytics_campaign_content;
	}

	/**
	 * Get the [google_analytics_content] column value.
	 * 
	 * @return     string
	 */
	public function getGoogleAnalyticsContent()
	{
		return $this->google_analytics_content;
	}

	/**
	 * Get the [litmus_test_id] column value.
	 * 
	 * @return     string
	 */
	public function getLitmusTestId()
	{
		return $this->litmus_test_id;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [created_by] column value.
	 * 
	 * @return     int
	 */
	public function getCreatedBy()
	{
		return $this->created_by;
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = CampaignPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [slug] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setSlug($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->slug !== $v) {
			$this->slug = $v;
			$this->modifiedColumns[] = CampaignPeer::SLUG;
		}

		return $this;
	} // setSlug()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = CampaignPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [commentaire] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setCommentaire($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->commentaire !== $v) {
			$this->commentaire = $v;
			$this->modifiedColumns[] = CampaignPeer::COMMENTAIRE;
		}

		return $this;
	} // setCommentaire()

	/**
	 * Set the value of [subject] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setSubject($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subject !== $v) {
			$this->subject = $v;
			$this->modifiedColumns[] = CampaignPeer::SUBJECT;
		}

		return $this;
	} // setSubject()

	/**
	 * Set the value of [template_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setTemplateId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->template_id !== $v) {
			$this->template_id = $v;
			$this->modifiedColumns[] = CampaignPeer::TEMPLATE_ID;
		}

		if ($this->aCampaignTemplate !== null && $this->aCampaignTemplate->getId() !== $v) {
			$this->aCampaignTemplate = null;
		}

		return $this;
	} // setTemplateId()

	/**
	 * Set the value of [content] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setContent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->content !== $v) {
			$this->content = $v;
			$this->modifiedColumns[] = CampaignPeer::CONTENT;
		}

		return $this;
	} // setContent()

	/**
	 * Set the value of [prepared_content] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setPreparedContent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prepared_content !== $v) {
			$this->prepared_content = $v;
			$this->modifiedColumns[] = CampaignPeer::PREPARED_CONTENT;
		}

		return $this;
	} // setPreparedContent()

	/**
	 * Set the value of [text_content] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setTextContent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->text_content !== $v) {
			$this->text_content = $v;
			$this->modifiedColumns[] = CampaignPeer::TEXT_CONTENT;
		}

		return $this;
	} // setTextContent()

	/**
	 * Set the value of [prepared_text_content] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setPreparedTextContent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prepared_text_content !== $v) {
			$this->prepared_text_content = $v;
			$this->modifiedColumns[] = CampaignPeer::PREPARED_TEXT_CONTENT;
		}

		return $this;
	} // setPreparedTextContent()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      int $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status !== $v) {
			$this->status = $v;
			$this->modifiedColumns[] = CampaignPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Set the value of [from_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setFromName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->from_name !== $v) {
			$this->from_name = $v;
			$this->modifiedColumns[] = CampaignPeer::FROM_NAME;
		}

		return $this;
	} // setFromName()

	/**
	 * Set the value of [from_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setFromEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->from_email !== $v) {
			$this->from_email = $v;
			$this->modifiedColumns[] = CampaignPeer::FROM_EMAIL;
		}

		return $this;
	} // setFromEmail()

	/**
	 * Sets the value of [scheduled_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setScheduledAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->scheduled_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->scheduled_at !== null && $tmpDt = new DateTime($this->scheduled_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->scheduled_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CampaignPeer::SCHEDULED_AT;
			}
		} // if either are not null

		return $this;
	} // setScheduledAt()

	/**
	 * Set the value of [schedule_type] column.
	 * 
	 * @param      int $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setScheduleType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->schedule_type !== $v) {
			$this->schedule_type = $v;
			$this->modifiedColumns[] = CampaignPeer::SCHEDULE_TYPE;
		}

		return $this;
	} // setScheduleType()

	/**
	 * Set the value of [test_type] column.
	 * 
	 * @param      int $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setTestType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->test_type !== $v) {
			$this->test_type = $v;
			$this->modifiedColumns[] = CampaignPeer::TEST_TYPE;
		}

		return $this;
	} // setTestType()

	/**
	 * Set the value of [test_user_list] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setTestUserList($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->test_user_list !== $v) {
			$this->test_user_list = $v;
			$this->modifiedColumns[] = CampaignPeer::TEST_USER_LIST;
		}

		return $this;
	} // setTestUserList()

	/**
	 * Set the value of [target] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setTarget($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->target !== $v) {
			$this->target = $v;
			$this->modifiedColumns[] = CampaignPeer::TARGET;
		}

		return $this;
	} // setTarget()

	/**
	 * Set the value of [reply_to_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setReplyToEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reply_to_email !== $v) {
			$this->reply_to_email = $v;
			$this->modifiedColumns[] = CampaignPeer::REPLY_TO_EMAIL;
		}

		return $this;
	} // setReplyToEmail()

	/**
	 * Set the value of [return_path_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setReturnPathEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->return_path_email !== $v) {
			$this->return_path_email = $v;
			$this->modifiedColumns[] = CampaignPeer::RETURN_PATH_EMAIL;
		}

		return $this;
	} // setReturnPathEmail()

	/**
	 * Set the value of [return_path_server] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setReturnPathServer($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->return_path_server !== $v) {
			$this->return_path_server = $v;
			$this->modifiedColumns[] = CampaignPeer::RETURN_PATH_SERVER;
		}

		return $this;
	} // setReturnPathServer()

	/**
	 * Set the value of [return_path_login] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setReturnPathLogin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->return_path_login !== $v) {
			$this->return_path_login = $v;
			$this->modifiedColumns[] = CampaignPeer::RETURN_PATH_LOGIN;
		}

		return $this;
	} // setReturnPathLogin()

	/**
	 * Set the value of [return_path_password] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setReturnPathPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->return_path_password !== $v) {
			$this->return_path_password = $v;
			$this->modifiedColumns[] = CampaignPeer::RETURN_PATH_PASSWORD;
		}

		return $this;
	} // setReturnPathPassword()

	/**
	 * Set the value of [is_archived] column.
	 * 
	 * @param      int $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setIsArchived($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->is_archived !== $v || $this->isNew()) {
			$this->is_archived = $v;
			$this->modifiedColumns[] = CampaignPeer::IS_ARCHIVED;
		}

		return $this;
	} // setIsArchived()

	/**
	 * Set the value of [google_analytics_enabled] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setGoogleAnalyticsEnabled($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->google_analytics_enabled !== $v || $this->isNew()) {
			$this->google_analytics_enabled = $v;
			$this->modifiedColumns[] = CampaignPeer::GOOGLE_ANALYTICS_ENABLED;
		}

		return $this;
	} // setGoogleAnalyticsEnabled()

	/**
	 * Set the value of [google_analytics_source] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setGoogleAnalyticsSource($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->google_analytics_source !== $v) {
			$this->google_analytics_source = $v;
			$this->modifiedColumns[] = CampaignPeer::GOOGLE_ANALYTICS_SOURCE;
		}

		return $this;
	} // setGoogleAnalyticsSource()

	/**
	 * Set the value of [google_analytics_medium] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setGoogleAnalyticsMedium($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->google_analytics_medium !== $v) {
			$this->google_analytics_medium = $v;
			$this->modifiedColumns[] = CampaignPeer::GOOGLE_ANALYTICS_MEDIUM;
		}

		return $this;
	} // setGoogleAnalyticsMedium()

	/**
	 * Set the value of [google_analytics_campaign_type] column.
	 * 
	 * @param      int $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setGoogleAnalyticsCampaignType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->google_analytics_campaign_type !== $v) {
			$this->google_analytics_campaign_type = $v;
			$this->modifiedColumns[] = CampaignPeer::GOOGLE_ANALYTICS_CAMPAIGN_TYPE;
		}

		return $this;
	} // setGoogleAnalyticsCampaignType()

	/**
	 * Set the value of [google_analytics_campaign_content] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setGoogleAnalyticsCampaignContent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->google_analytics_campaign_content !== $v) {
			$this->google_analytics_campaign_content = $v;
			$this->modifiedColumns[] = CampaignPeer::GOOGLE_ANALYTICS_CAMPAIGN_CONTENT;
		}

		return $this;
	} // setGoogleAnalyticsCampaignContent()

	/**
	 * Set the value of [google_analytics_content] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setGoogleAnalyticsContent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->google_analytics_content !== $v) {
			$this->google_analytics_content = $v;
			$this->modifiedColumns[] = CampaignPeer::GOOGLE_ANALYTICS_CONTENT;
		}

		return $this;
	} // setGoogleAnalyticsContent()

	/**
	 * Set the value of [litmus_test_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setLitmusTestId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->litmus_test_id !== $v) {
			$this->litmus_test_id = $v;
			$this->modifiedColumns[] = CampaignPeer::LITMUS_TEST_ID;
		}

		return $this;
	} // setLitmusTestId()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CampaignPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [created_by] column.
	 * 
	 * @param      int $v new value
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setCreatedBy($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->created_by !== $v) {
			$this->created_by = $v;
			$this->modifiedColumns[] = CampaignPeer::CREATED_BY;
		}

		if ($this->asfGuardUserProfile !== null && $this->asfGuardUserProfile->getId() !== $v) {
			$this->asfGuardUserProfile = null;
		}

		return $this;
	} // setCreatedBy()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Campaign The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CampaignPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->is_archived !== 0) {
				return false;
			}

			if ($this->google_analytics_enabled !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->slug = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->commentaire = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->subject = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->template_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->content = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->prepared_content = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->text_content = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->prepared_text_content = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->status = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->from_name = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->from_email = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->scheduled_at = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->schedule_type = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->test_type = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->test_user_list = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->target = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->reply_to_email = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->return_path_email = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->return_path_server = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->return_path_login = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->return_path_password = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->is_archived = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->google_analytics_enabled = ($row[$startcol + 24] !== null) ? (boolean) $row[$startcol + 24] : null;
			$this->google_analytics_source = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->google_analytics_medium = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->google_analytics_campaign_type = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->google_analytics_campaign_content = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->google_analytics_content = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->litmus_test_id = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->created_at = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->created_by = ($row[$startcol + 32] !== null) ? (int) $row[$startcol + 32] : null;
			$this->updated_at = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 34; // 34 = CampaignPeer::NUM_COLUMNS - CampaignPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Campaign object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCampaignTemplate !== null && $this->template_id !== $this->aCampaignTemplate->getId()) {
			$this->aCampaignTemplate = null;
		}
		if ($this->asfGuardUserProfile !== null && $this->created_by !== $this->asfGuardUserProfile->getId()) {
			$this->asfGuardUserProfile = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CampaignPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CampaignPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aCampaignTemplate = null;
			$this->asfGuardUserProfile = null;
			$this->collCampaignContactGroups = null;
			$this->lastCampaignContactGroupCriteria = null;

			$this->collCampaignContacts = null;
			$this->lastCampaignContactCriteria = null;

			$this->collCampaignContactElements = null;
			$this->lastCampaignContactElementCriteria = null;

			$this->collCampaignLinks = null;
			$this->lastCampaignLinkCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CampaignPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCampaign:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				CampaignPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCampaign:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CampaignPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseCampaign:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(CampaignPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(CampaignPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseCampaign:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				CampaignPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCampaignTemplate !== null) {
				if ($this->aCampaignTemplate->isModified() || $this->aCampaignTemplate->isNew()) {
					$affectedRows += $this->aCampaignTemplate->save($con);
				}
				$this->setCampaignTemplate($this->aCampaignTemplate);
			}

			if ($this->asfGuardUserProfile !== null) {
				if ($this->asfGuardUserProfile->isModified() || $this->asfGuardUserProfile->isNew()) {
					$affectedRows += $this->asfGuardUserProfile->save($con);
				}
				$this->setsfGuardUserProfile($this->asfGuardUserProfile);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CampaignPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CampaignPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CampaignPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCampaignContactGroups !== null) {
				foreach ($this->collCampaignContactGroups as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCampaignContacts !== null) {
				foreach ($this->collCampaignContacts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCampaignContactElements !== null) {
				foreach ($this->collCampaignContactElements as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCampaignLinks !== null) {
				foreach ($this->collCampaignLinks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCampaignTemplate !== null) {
				if (!$this->aCampaignTemplate->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCampaignTemplate->getValidationFailures());
				}
			}

			if ($this->asfGuardUserProfile !== null) {
				if (!$this->asfGuardUserProfile->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardUserProfile->getValidationFailures());
				}
			}


			if (($retval = CampaignPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCampaignContactGroups !== null) {
					foreach ($this->collCampaignContactGroups as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCampaignContacts !== null) {
					foreach ($this->collCampaignContacts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCampaignContactElements !== null) {
					foreach ($this->collCampaignContactElements as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCampaignLinks !== null) {
					foreach ($this->collCampaignLinks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CampaignPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getSlug();
				break;
			case 2:
				return $this->getName();
				break;
			case 3:
				return $this->getCommentaire();
				break;
			case 4:
				return $this->getSubject();
				break;
			case 5:
				return $this->getTemplateId();
				break;
			case 6:
				return $this->getContent();
				break;
			case 7:
				return $this->getPreparedContent();
				break;
			case 8:
				return $this->getTextContent();
				break;
			case 9:
				return $this->getPreparedTextContent();
				break;
			case 10:
				return $this->getStatus();
				break;
			case 11:
				return $this->getFromName();
				break;
			case 12:
				return $this->getFromEmail();
				break;
			case 13:
				return $this->getScheduledAt();
				break;
			case 14:
				return $this->getScheduleType();
				break;
			case 15:
				return $this->getTestType();
				break;
			case 16:
				return $this->getTestUserList();
				break;
			case 17:
				return $this->getTarget();
				break;
			case 18:
				return $this->getReplyToEmail();
				break;
			case 19:
				return $this->getReturnPathEmail();
				break;
			case 20:
				return $this->getReturnPathServer();
				break;
			case 21:
				return $this->getReturnPathLogin();
				break;
			case 22:
				return $this->getReturnPathPassword();
				break;
			case 23:
				return $this->getIsArchived();
				break;
			case 24:
				return $this->getGoogleAnalyticsEnabled();
				break;
			case 25:
				return $this->getGoogleAnalyticsSource();
				break;
			case 26:
				return $this->getGoogleAnalyticsMedium();
				break;
			case 27:
				return $this->getGoogleAnalyticsCampaignType();
				break;
			case 28:
				return $this->getGoogleAnalyticsCampaignContent();
				break;
			case 29:
				return $this->getGoogleAnalyticsContent();
				break;
			case 30:
				return $this->getLitmusTestId();
				break;
			case 31:
				return $this->getCreatedAt();
				break;
			case 32:
				return $this->getCreatedBy();
				break;
			case 33:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CampaignPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getSlug(),
			$keys[2] => $this->getName(),
			$keys[3] => $this->getCommentaire(),
			$keys[4] => $this->getSubject(),
			$keys[5] => $this->getTemplateId(),
			$keys[6] => $this->getContent(),
			$keys[7] => $this->getPreparedContent(),
			$keys[8] => $this->getTextContent(),
			$keys[9] => $this->getPreparedTextContent(),
			$keys[10] => $this->getStatus(),
			$keys[11] => $this->getFromName(),
			$keys[12] => $this->getFromEmail(),
			$keys[13] => $this->getScheduledAt(),
			$keys[14] => $this->getScheduleType(),
			$keys[15] => $this->getTestType(),
			$keys[16] => $this->getTestUserList(),
			$keys[17] => $this->getTarget(),
			$keys[18] => $this->getReplyToEmail(),
			$keys[19] => $this->getReturnPathEmail(),
			$keys[20] => $this->getReturnPathServer(),
			$keys[21] => $this->getReturnPathLogin(),
			$keys[22] => $this->getReturnPathPassword(),
			$keys[23] => $this->getIsArchived(),
			$keys[24] => $this->getGoogleAnalyticsEnabled(),
			$keys[25] => $this->getGoogleAnalyticsSource(),
			$keys[26] => $this->getGoogleAnalyticsMedium(),
			$keys[27] => $this->getGoogleAnalyticsCampaignType(),
			$keys[28] => $this->getGoogleAnalyticsCampaignContent(),
			$keys[29] => $this->getGoogleAnalyticsContent(),
			$keys[30] => $this->getLitmusTestId(),
			$keys[31] => $this->getCreatedAt(),
			$keys[32] => $this->getCreatedBy(),
			$keys[33] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CampaignPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setSlug($value);
				break;
			case 2:
				$this->setName($value);
				break;
			case 3:
				$this->setCommentaire($value);
				break;
			case 4:
				$this->setSubject($value);
				break;
			case 5:
				$this->setTemplateId($value);
				break;
			case 6:
				$this->setContent($value);
				break;
			case 7:
				$this->setPreparedContent($value);
				break;
			case 8:
				$this->setTextContent($value);
				break;
			case 9:
				$this->setPreparedTextContent($value);
				break;
			case 10:
				$this->setStatus($value);
				break;
			case 11:
				$this->setFromName($value);
				break;
			case 12:
				$this->setFromEmail($value);
				break;
			case 13:
				$this->setScheduledAt($value);
				break;
			case 14:
				$this->setScheduleType($value);
				break;
			case 15:
				$this->setTestType($value);
				break;
			case 16:
				$this->setTestUserList($value);
				break;
			case 17:
				$this->setTarget($value);
				break;
			case 18:
				$this->setReplyToEmail($value);
				break;
			case 19:
				$this->setReturnPathEmail($value);
				break;
			case 20:
				$this->setReturnPathServer($value);
				break;
			case 21:
				$this->setReturnPathLogin($value);
				break;
			case 22:
				$this->setReturnPathPassword($value);
				break;
			case 23:
				$this->setIsArchived($value);
				break;
			case 24:
				$this->setGoogleAnalyticsEnabled($value);
				break;
			case 25:
				$this->setGoogleAnalyticsSource($value);
				break;
			case 26:
				$this->setGoogleAnalyticsMedium($value);
				break;
			case 27:
				$this->setGoogleAnalyticsCampaignType($value);
				break;
			case 28:
				$this->setGoogleAnalyticsCampaignContent($value);
				break;
			case 29:
				$this->setGoogleAnalyticsContent($value);
				break;
			case 30:
				$this->setLitmusTestId($value);
				break;
			case 31:
				$this->setCreatedAt($value);
				break;
			case 32:
				$this->setCreatedBy($value);
				break;
			case 33:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CampaignPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setSlug($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCommentaire($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setSubject($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTemplateId($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setContent($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPreparedContent($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setTextContent($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPreparedTextContent($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setStatus($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFromName($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setFromEmail($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setScheduledAt($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setScheduleType($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTestType($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setTestUserList($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setTarget($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setReplyToEmail($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setReturnPathEmail($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setReturnPathServer($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setReturnPathLogin($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setReturnPathPassword($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setIsArchived($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setGoogleAnalyticsEnabled($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setGoogleAnalyticsSource($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setGoogleAnalyticsMedium($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setGoogleAnalyticsCampaignType($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setGoogleAnalyticsCampaignContent($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setGoogleAnalyticsContent($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setLitmusTestId($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setCreatedAt($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setCreatedBy($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setUpdatedAt($arr[$keys[33]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CampaignPeer::DATABASE_NAME);

		if ($this->isColumnModified(CampaignPeer::ID)) $criteria->add(CampaignPeer::ID, $this->id);
		if ($this->isColumnModified(CampaignPeer::SLUG)) $criteria->add(CampaignPeer::SLUG, $this->slug);
		if ($this->isColumnModified(CampaignPeer::NAME)) $criteria->add(CampaignPeer::NAME, $this->name);
		if ($this->isColumnModified(CampaignPeer::COMMENTAIRE)) $criteria->add(CampaignPeer::COMMENTAIRE, $this->commentaire);
		if ($this->isColumnModified(CampaignPeer::SUBJECT)) $criteria->add(CampaignPeer::SUBJECT, $this->subject);
		if ($this->isColumnModified(CampaignPeer::TEMPLATE_ID)) $criteria->add(CampaignPeer::TEMPLATE_ID, $this->template_id);
		if ($this->isColumnModified(CampaignPeer::CONTENT)) $criteria->add(CampaignPeer::CONTENT, $this->content);
		if ($this->isColumnModified(CampaignPeer::PREPARED_CONTENT)) $criteria->add(CampaignPeer::PREPARED_CONTENT, $this->prepared_content);
		if ($this->isColumnModified(CampaignPeer::TEXT_CONTENT)) $criteria->add(CampaignPeer::TEXT_CONTENT, $this->text_content);
		if ($this->isColumnModified(CampaignPeer::PREPARED_TEXT_CONTENT)) $criteria->add(CampaignPeer::PREPARED_TEXT_CONTENT, $this->prepared_text_content);
		if ($this->isColumnModified(CampaignPeer::STATUS)) $criteria->add(CampaignPeer::STATUS, $this->status);
		if ($this->isColumnModified(CampaignPeer::FROM_NAME)) $criteria->add(CampaignPeer::FROM_NAME, $this->from_name);
		if ($this->isColumnModified(CampaignPeer::FROM_EMAIL)) $criteria->add(CampaignPeer::FROM_EMAIL, $this->from_email);
		if ($this->isColumnModified(CampaignPeer::SCHEDULED_AT)) $criteria->add(CampaignPeer::SCHEDULED_AT, $this->scheduled_at);
		if ($this->isColumnModified(CampaignPeer::SCHEDULE_TYPE)) $criteria->add(CampaignPeer::SCHEDULE_TYPE, $this->schedule_type);
		if ($this->isColumnModified(CampaignPeer::TEST_TYPE)) $criteria->add(CampaignPeer::TEST_TYPE, $this->test_type);
		if ($this->isColumnModified(CampaignPeer::TEST_USER_LIST)) $criteria->add(CampaignPeer::TEST_USER_LIST, $this->test_user_list);
		if ($this->isColumnModified(CampaignPeer::TARGET)) $criteria->add(CampaignPeer::TARGET, $this->target);
		if ($this->isColumnModified(CampaignPeer::REPLY_TO_EMAIL)) $criteria->add(CampaignPeer::REPLY_TO_EMAIL, $this->reply_to_email);
		if ($this->isColumnModified(CampaignPeer::RETURN_PATH_EMAIL)) $criteria->add(CampaignPeer::RETURN_PATH_EMAIL, $this->return_path_email);
		if ($this->isColumnModified(CampaignPeer::RETURN_PATH_SERVER)) $criteria->add(CampaignPeer::RETURN_PATH_SERVER, $this->return_path_server);
		if ($this->isColumnModified(CampaignPeer::RETURN_PATH_LOGIN)) $criteria->add(CampaignPeer::RETURN_PATH_LOGIN, $this->return_path_login);
		if ($this->isColumnModified(CampaignPeer::RETURN_PATH_PASSWORD)) $criteria->add(CampaignPeer::RETURN_PATH_PASSWORD, $this->return_path_password);
		if ($this->isColumnModified(CampaignPeer::IS_ARCHIVED)) $criteria->add(CampaignPeer::IS_ARCHIVED, $this->is_archived);
		if ($this->isColumnModified(CampaignPeer::GOOGLE_ANALYTICS_ENABLED)) $criteria->add(CampaignPeer::GOOGLE_ANALYTICS_ENABLED, $this->google_analytics_enabled);
		if ($this->isColumnModified(CampaignPeer::GOOGLE_ANALYTICS_SOURCE)) $criteria->add(CampaignPeer::GOOGLE_ANALYTICS_SOURCE, $this->google_analytics_source);
		if ($this->isColumnModified(CampaignPeer::GOOGLE_ANALYTICS_MEDIUM)) $criteria->add(CampaignPeer::GOOGLE_ANALYTICS_MEDIUM, $this->google_analytics_medium);
		if ($this->isColumnModified(CampaignPeer::GOOGLE_ANALYTICS_CAMPAIGN_TYPE)) $criteria->add(CampaignPeer::GOOGLE_ANALYTICS_CAMPAIGN_TYPE, $this->google_analytics_campaign_type);
		if ($this->isColumnModified(CampaignPeer::GOOGLE_ANALYTICS_CAMPAIGN_CONTENT)) $criteria->add(CampaignPeer::GOOGLE_ANALYTICS_CAMPAIGN_CONTENT, $this->google_analytics_campaign_content);
		if ($this->isColumnModified(CampaignPeer::GOOGLE_ANALYTICS_CONTENT)) $criteria->add(CampaignPeer::GOOGLE_ANALYTICS_CONTENT, $this->google_analytics_content);
		if ($this->isColumnModified(CampaignPeer::LITMUS_TEST_ID)) $criteria->add(CampaignPeer::LITMUS_TEST_ID, $this->litmus_test_id);
		if ($this->isColumnModified(CampaignPeer::CREATED_AT)) $criteria->add(CampaignPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(CampaignPeer::CREATED_BY)) $criteria->add(CampaignPeer::CREATED_BY, $this->created_by);
		if ($this->isColumnModified(CampaignPeer::UPDATED_AT)) $criteria->add(CampaignPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CampaignPeer::DATABASE_NAME);

		$criteria->add(CampaignPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Campaign (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setSlug($this->slug);

		$copyObj->setName($this->name);

		$copyObj->setCommentaire($this->commentaire);

		$copyObj->setSubject($this->subject);

		$copyObj->setTemplateId($this->template_id);

		$copyObj->setContent($this->content);

		$copyObj->setPreparedContent($this->prepared_content);

		$copyObj->setTextContent($this->text_content);

		$copyObj->setPreparedTextContent($this->prepared_text_content);

		$copyObj->setStatus($this->status);

		$copyObj->setFromName($this->from_name);

		$copyObj->setFromEmail($this->from_email);

		$copyObj->setScheduledAt($this->scheduled_at);

		$copyObj->setScheduleType($this->schedule_type);

		$copyObj->setTestType($this->test_type);

		$copyObj->setTestUserList($this->test_user_list);

		$copyObj->setTarget($this->target);

		$copyObj->setReplyToEmail($this->reply_to_email);

		$copyObj->setReturnPathEmail($this->return_path_email);

		$copyObj->setReturnPathServer($this->return_path_server);

		$copyObj->setReturnPathLogin($this->return_path_login);

		$copyObj->setReturnPathPassword($this->return_path_password);

		$copyObj->setIsArchived($this->is_archived);

		$copyObj->setGoogleAnalyticsEnabled($this->google_analytics_enabled);

		$copyObj->setGoogleAnalyticsSource($this->google_analytics_source);

		$copyObj->setGoogleAnalyticsMedium($this->google_analytics_medium);

		$copyObj->setGoogleAnalyticsCampaignType($this->google_analytics_campaign_type);

		$copyObj->setGoogleAnalyticsCampaignContent($this->google_analytics_campaign_content);

		$copyObj->setGoogleAnalyticsContent($this->google_analytics_content);

		$copyObj->setLitmusTestId($this->litmus_test_id);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setCreatedBy($this->created_by);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCampaignContactGroups() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCampaignContactGroup($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCampaignContacts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCampaignContact($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCampaignContactElements() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCampaignContactElement($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCampaignLinks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCampaignLink($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Campaign Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CampaignPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CampaignPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a CampaignTemplate object.
	 *
	 * @param      CampaignTemplate $v
	 * @return     Campaign The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCampaignTemplate(CampaignTemplate $v = null)
	{
		if ($v === null) {
			$this->setTemplateId(NULL);
		} else {
			$this->setTemplateId($v->getId());
		}

		$this->aCampaignTemplate = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CampaignTemplate object, it will not be re-added.
		if ($v !== null) {
			$v->addCampaign($this);
		}

		return $this;
	}


	/**
	 * Get the associated CampaignTemplate object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CampaignTemplate The associated CampaignTemplate object.
	 * @throws     PropelException
	 */
	public function getCampaignTemplate(PropelPDO $con = null)
	{
		if ($this->aCampaignTemplate === null && ($this->template_id !== null)) {
			$this->aCampaignTemplate = CampaignTemplatePeer::retrieveByPk($this->template_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCampaignTemplate->addCampaigns($this);
			 */
		}
		return $this->aCampaignTemplate;
	}

	/**
	 * Declares an association between this object and a sfGuardUserProfile object.
	 *
	 * @param      sfGuardUserProfile $v
	 * @return     Campaign The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardUserProfile(sfGuardUserProfile $v = null)
	{
		if ($v === null) {
			$this->setCreatedBy(NULL);
		} else {
			$this->setCreatedBy($v->getId());
		}

		$this->asfGuardUserProfile = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfGuardUserProfile object, it will not be re-added.
		if ($v !== null) {
			$v->addCampaign($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardUserProfile object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardUserProfile The associated sfGuardUserProfile object.
	 * @throws     PropelException
	 */
	public function getsfGuardUserProfile(PropelPDO $con = null)
	{
		if ($this->asfGuardUserProfile === null && ($this->created_by !== null)) {
			$this->asfGuardUserProfile = sfGuardUserProfilePeer::retrieveByPk($this->created_by);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->asfGuardUserProfile->addCampaigns($this);
			 */
		}
		return $this->asfGuardUserProfile;
	}

	/**
	 * Clears out the collCampaignContactGroups collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCampaignContactGroups()
	 */
	public function clearCampaignContactGroups()
	{
		$this->collCampaignContactGroups = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCampaignContactGroups collection (array).
	 *
	 * By default this just sets the collCampaignContactGroups collection to an empty array (like clearcollCampaignContactGroups());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCampaignContactGroups()
	{
		$this->collCampaignContactGroups = array();
	}

	/**
	 * Gets an array of CampaignContactGroup objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Campaign has previously been saved, it will retrieve
	 * related CampaignContactGroups from storage. If this Campaign is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CampaignContactGroup[]
	 * @throws     PropelException
	 */
	public function getCampaignContactGroups($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampaignPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampaignContactGroups === null) {
			if ($this->isNew()) {
			   $this->collCampaignContactGroups = array();
			} else {

				$criteria->add(CampaignContactGroupPeer::CAMPAIGN_ID, $this->id);

				CampaignContactGroupPeer::addSelectColumns($criteria);
				$this->collCampaignContactGroups = CampaignContactGroupPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CampaignContactGroupPeer::CAMPAIGN_ID, $this->id);

				CampaignContactGroupPeer::addSelectColumns($criteria);
				if (!isset($this->lastCampaignContactGroupCriteria) || !$this->lastCampaignContactGroupCriteria->equals($criteria)) {
					$this->collCampaignContactGroups = CampaignContactGroupPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCampaignContactGroupCriteria = $criteria;
		return $this->collCampaignContactGroups;
	}

	/**
	 * Returns the number of related CampaignContactGroup objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CampaignContactGroup objects.
	 * @throws     PropelException
	 */
	public function countCampaignContactGroups(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampaignPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCampaignContactGroups === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CampaignContactGroupPeer::CAMPAIGN_ID, $this->id);

				$count = CampaignContactGroupPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CampaignContactGroupPeer::CAMPAIGN_ID, $this->id);

				if (!isset($this->lastCampaignContactGroupCriteria) || !$this->lastCampaignContactGroupCriteria->equals($criteria)) {
					$count = CampaignContactGroupPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCampaignContactGroups);
				}
			} else {
				$count = count($this->collCampaignContactGroups);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CampaignContactGroup object to this object
	 * through the CampaignContactGroup foreign key attribute.
	 *
	 * @param      CampaignContactGroup $l CampaignContactGroup
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCampaignContactGroup(CampaignContactGroup $l)
	{
		if ($this->collCampaignContactGroups === null) {
			$this->initCampaignContactGroups();
		}
		if (!in_array($l, $this->collCampaignContactGroups, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCampaignContactGroups, $l);
			$l->setCampaign($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Campaign is new, it will return
	 * an empty collection; or if this Campaign has previously
	 * been saved, it will retrieve related CampaignContactGroups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Campaign.
	 */
	public function getCampaignContactGroupsJoinContactGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampaignPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampaignContactGroups === null) {
			if ($this->isNew()) {
				$this->collCampaignContactGroups = array();
			} else {

				$criteria->add(CampaignContactGroupPeer::CAMPAIGN_ID, $this->id);

				$this->collCampaignContactGroups = CampaignContactGroupPeer::doSelectJoinContactGroup($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CampaignContactGroupPeer::CAMPAIGN_ID, $this->id);

			if (!isset($this->lastCampaignContactGroupCriteria) || !$this->lastCampaignContactGroupCriteria->equals($criteria)) {
				$this->collCampaignContactGroups = CampaignContactGroupPeer::doSelectJoinContactGroup($criteria, $con, $join_behavior);
			}
		}
		$this->lastCampaignContactGroupCriteria = $criteria;

		return $this->collCampaignContactGroups;
	}

	/**
	 * Clears out the collCampaignContacts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCampaignContacts()
	 */
	public function clearCampaignContacts()
	{
		$this->collCampaignContacts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCampaignContacts collection (array).
	 *
	 * By default this just sets the collCampaignContacts collection to an empty array (like clearcollCampaignContacts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCampaignContacts()
	{
		$this->collCampaignContacts = array();
	}

	/**
	 * Gets an array of CampaignContact objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Campaign has previously been saved, it will retrieve
	 * related CampaignContacts from storage. If this Campaign is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CampaignContact[]
	 * @throws     PropelException
	 */
	public function getCampaignContacts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampaignPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampaignContacts === null) {
			if ($this->isNew()) {
			   $this->collCampaignContacts = array();
			} else {

				$criteria->add(CampaignContactPeer::CAMPAIGN_ID, $this->id);

				CampaignContactPeer::addSelectColumns($criteria);
				$this->collCampaignContacts = CampaignContactPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CampaignContactPeer::CAMPAIGN_ID, $this->id);

				CampaignContactPeer::addSelectColumns($criteria);
				if (!isset($this->lastCampaignContactCriteria) || !$this->lastCampaignContactCriteria->equals($criteria)) {
					$this->collCampaignContacts = CampaignContactPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCampaignContactCriteria = $criteria;
		return $this->collCampaignContacts;
	}

	/**
	 * Returns the number of related CampaignContact objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CampaignContact objects.
	 * @throws     PropelException
	 */
	public function countCampaignContacts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampaignPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCampaignContacts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CampaignContactPeer::CAMPAIGN_ID, $this->id);

				$count = CampaignContactPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CampaignContactPeer::CAMPAIGN_ID, $this->id);

				if (!isset($this->lastCampaignContactCriteria) || !$this->lastCampaignContactCriteria->equals($criteria)) {
					$count = CampaignContactPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCampaignContacts);
				}
			} else {
				$count = count($this->collCampaignContacts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CampaignContact object to this object
	 * through the CampaignContact foreign key attribute.
	 *
	 * @param      CampaignContact $l CampaignContact
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCampaignContact(CampaignContact $l)
	{
		if ($this->collCampaignContacts === null) {
			$this->initCampaignContacts();
		}
		if (!in_array($l, $this->collCampaignContacts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCampaignContacts, $l);
			$l->setCampaign($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Campaign is new, it will return
	 * an empty collection; or if this Campaign has previously
	 * been saved, it will retrieve related CampaignContacts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Campaign.
	 */
	public function getCampaignContactsJoinContact($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampaignPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampaignContacts === null) {
			if ($this->isNew()) {
				$this->collCampaignContacts = array();
			} else {

				$criteria->add(CampaignContactPeer::CAMPAIGN_ID, $this->id);

				$this->collCampaignContacts = CampaignContactPeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CampaignContactPeer::CAMPAIGN_ID, $this->id);

			if (!isset($this->lastCampaignContactCriteria) || !$this->lastCampaignContactCriteria->equals($criteria)) {
				$this->collCampaignContacts = CampaignContactPeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		}
		$this->lastCampaignContactCriteria = $criteria;

		return $this->collCampaignContacts;
	}

	/**
	 * Clears out the collCampaignContactElements collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCampaignContactElements()
	 */
	public function clearCampaignContactElements()
	{
		$this->collCampaignContactElements = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCampaignContactElements collection (array).
	 *
	 * By default this just sets the collCampaignContactElements collection to an empty array (like clearcollCampaignContactElements());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCampaignContactElements()
	{
		$this->collCampaignContactElements = array();
	}

	/**
	 * Gets an array of CampaignContactElement objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Campaign has previously been saved, it will retrieve
	 * related CampaignContactElements from storage. If this Campaign is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CampaignContactElement[]
	 * @throws     PropelException
	 */
	public function getCampaignContactElements($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampaignPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampaignContactElements === null) {
			if ($this->isNew()) {
			   $this->collCampaignContactElements = array();
			} else {

				$criteria->add(CampaignContactElementPeer::CAMPAIGN_ID, $this->id);

				CampaignContactElementPeer::addSelectColumns($criteria);
				$this->collCampaignContactElements = CampaignContactElementPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CampaignContactElementPeer::CAMPAIGN_ID, $this->id);

				CampaignContactElementPeer::addSelectColumns($criteria);
				if (!isset($this->lastCampaignContactElementCriteria) || !$this->lastCampaignContactElementCriteria->equals($criteria)) {
					$this->collCampaignContactElements = CampaignContactElementPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCampaignContactElementCriteria = $criteria;
		return $this->collCampaignContactElements;
	}

	/**
	 * Returns the number of related CampaignContactElement objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CampaignContactElement objects.
	 * @throws     PropelException
	 */
	public function countCampaignContactElements(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampaignPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCampaignContactElements === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CampaignContactElementPeer::CAMPAIGN_ID, $this->id);

				$count = CampaignContactElementPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CampaignContactElementPeer::CAMPAIGN_ID, $this->id);

				if (!isset($this->lastCampaignContactElementCriteria) || !$this->lastCampaignContactElementCriteria->equals($criteria)) {
					$count = CampaignContactElementPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCampaignContactElements);
				}
			} else {
				$count = count($this->collCampaignContactElements);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CampaignContactElement object to this object
	 * through the CampaignContactElement foreign key attribute.
	 *
	 * @param      CampaignContactElement $l CampaignContactElement
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCampaignContactElement(CampaignContactElement $l)
	{
		if ($this->collCampaignContactElements === null) {
			$this->initCampaignContactElements();
		}
		if (!in_array($l, $this->collCampaignContactElements, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCampaignContactElements, $l);
			$l->setCampaign($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Campaign is new, it will return
	 * an empty collection; or if this Campaign has previously
	 * been saved, it will retrieve related CampaignContactElements from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Campaign.
	 */
	public function getCampaignContactElementsJoinContact($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampaignPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampaignContactElements === null) {
			if ($this->isNew()) {
				$this->collCampaignContactElements = array();
			} else {

				$criteria->add(CampaignContactElementPeer::CAMPAIGN_ID, $this->id);

				$this->collCampaignContactElements = CampaignContactElementPeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CampaignContactElementPeer::CAMPAIGN_ID, $this->id);

			if (!isset($this->lastCampaignContactElementCriteria) || !$this->lastCampaignContactElementCriteria->equals($criteria)) {
				$this->collCampaignContactElements = CampaignContactElementPeer::doSelectJoinContact($criteria, $con, $join_behavior);
			}
		}
		$this->lastCampaignContactElementCriteria = $criteria;

		return $this->collCampaignContactElements;
	}

	/**
	 * Clears out the collCampaignLinks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCampaignLinks()
	 */
	public function clearCampaignLinks()
	{
		$this->collCampaignLinks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCampaignLinks collection (array).
	 *
	 * By default this just sets the collCampaignLinks collection to an empty array (like clearcollCampaignLinks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCampaignLinks()
	{
		$this->collCampaignLinks = array();
	}

	/**
	 * Gets an array of CampaignLink objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Campaign has previously been saved, it will retrieve
	 * related CampaignLinks from storage. If this Campaign is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CampaignLink[]
	 * @throws     PropelException
	 */
	public function getCampaignLinks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampaignPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampaignLinks === null) {
			if ($this->isNew()) {
			   $this->collCampaignLinks = array();
			} else {

				$criteria->add(CampaignLinkPeer::CAMPAIGN_ID, $this->id);

				CampaignLinkPeer::addSelectColumns($criteria);
				$this->collCampaignLinks = CampaignLinkPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CampaignLinkPeer::CAMPAIGN_ID, $this->id);

				CampaignLinkPeer::addSelectColumns($criteria);
				if (!isset($this->lastCampaignLinkCriteria) || !$this->lastCampaignLinkCriteria->equals($criteria)) {
					$this->collCampaignLinks = CampaignLinkPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCampaignLinkCriteria = $criteria;
		return $this->collCampaignLinks;
	}

	/**
	 * Returns the number of related CampaignLink objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CampaignLink objects.
	 * @throws     PropelException
	 */
	public function countCampaignLinks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampaignPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCampaignLinks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CampaignLinkPeer::CAMPAIGN_ID, $this->id);

				$count = CampaignLinkPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CampaignLinkPeer::CAMPAIGN_ID, $this->id);

				if (!isset($this->lastCampaignLinkCriteria) || !$this->lastCampaignLinkCriteria->equals($criteria)) {
					$count = CampaignLinkPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCampaignLinks);
				}
			} else {
				$count = count($this->collCampaignLinks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CampaignLink object to this object
	 * through the CampaignLink foreign key attribute.
	 *
	 * @param      CampaignLink $l CampaignLink
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCampaignLink(CampaignLink $l)
	{
		if ($this->collCampaignLinks === null) {
			$this->initCampaignLinks();
		}
		if (!in_array($l, $this->collCampaignLinks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCampaignLinks, $l);
			$l->setCampaign($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCampaignContactGroups) {
				foreach ((array) $this->collCampaignContactGroups as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCampaignContacts) {
				foreach ((array) $this->collCampaignContacts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCampaignContactElements) {
				foreach ((array) $this->collCampaignContactElements as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCampaignLinks) {
				foreach ((array) $this->collCampaignLinks as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCampaignContactGroups = null;
		$this->collCampaignContacts = null;
		$this->collCampaignContactElements = null;
		$this->collCampaignLinks = null;
			$this->aCampaignTemplate = null;
			$this->asfGuardUserProfile = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseCampaign:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseCampaign::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseCampaign
