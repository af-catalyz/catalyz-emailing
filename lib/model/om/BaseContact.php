<?php

/**
 * Base class that represents a row from the 'contact' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Jul  3 08:09:23 2013
 *
 * @package    lib.model.om
 */
abstract class BaseContact extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ContactPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the slug field.
	 * @var        string
	 */
	protected $slug;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the company field.
	 * @var        string
	 */
	protected $company;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the status field.
	 * @var        int
	 */
	protected $status;

	/**
	 * The value for the external_reference field.
	 * @var        string
	 */
	protected $external_reference;

	/**
	 * The value for the custom1 field.
	 * @var        string
	 */
	protected $custom1;

	/**
	 * The value for the custom2 field.
	 * @var        string
	 */
	protected $custom2;

	/**
	 * The value for the custom3 field.
	 * @var        string
	 */
	protected $custom3;

	/**
	 * The value for the custom4 field.
	 * @var        string
	 */
	protected $custom4;

	/**
	 * The value for the custom5 field.
	 * @var        string
	 */
	protected $custom5;

	/**
	 * The value for the custom6 field.
	 * @var        string
	 */
	protected $custom6;

	/**
	 * The value for the custom7 field.
	 * @var        string
	 */
	protected $custom7;

	/**
	 * The value for the custom8 field.
	 * @var        string
	 */
	protected $custom8;

	/**
	 * The value for the custom9 field.
	 * @var        string
	 */
	protected $custom9;

	/**
	 * The value for the custom10 field.
	 * @var        string
	 */
	protected $custom10;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        array ContactContactGroup[] Collection to store aggregation of ContactContactGroup objects.
	 */
	protected $collContactContactGroups;

	/**
	 * @var        Criteria The criteria used to select the current contents of collContactContactGroups.
	 */
	private $lastContactContactGroupCriteria = null;

	/**
	 * @var        array CampaignContact[] Collection to store aggregation of CampaignContact objects.
	 */
	protected $collCampaignContacts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCampaignContacts.
	 */
	private $lastCampaignContactCriteria = null;

	/**
	 * @var        array CampaignContactElement[] Collection to store aggregation of CampaignContactElement objects.
	 */
	protected $collCampaignContactElements;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCampaignContactElements.
	 */
	private $lastCampaignContactElementCriteria = null;

	/**
	 * @var        array WebVisitor[] Collection to store aggregation of WebVisitor objects.
	 */
	protected $collWebVisitors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collWebVisitors.
	 */
	private $lastWebVisitorCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ContactPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [slug] column value.
	 * 
	 * @return     string
	 */
	public function getSlug()
	{
		return $this->slug;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [company] column value.
	 * 
	 * @return     string
	 */
	public function getCompany()
	{
		return $this->company;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     int
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [external_reference] column value.
	 * 
	 * @return     string
	 */
	public function getExternalReference()
	{
		return $this->external_reference;
	}

	/**
	 * Get the [custom1] column value.
	 * 
	 * @return     string
	 */
	public function getCustom1()
	{
		return $this->custom1;
	}

	/**
	 * Get the [custom2] column value.
	 * 
	 * @return     string
	 */
	public function getCustom2()
	{
		return $this->custom2;
	}

	/**
	 * Get the [custom3] column value.
	 * 
	 * @return     string
	 */
	public function getCustom3()
	{
		return $this->custom3;
	}

	/**
	 * Get the [custom4] column value.
	 * 
	 * @return     string
	 */
	public function getCustom4()
	{
		return $this->custom4;
	}

	/**
	 * Get the [custom5] column value.
	 * 
	 * @return     string
	 */
	public function getCustom5()
	{
		return $this->custom5;
	}

	/**
	 * Get the [custom6] column value.
	 * 
	 * @return     string
	 */
	public function getCustom6()
	{
		return $this->custom6;
	}

	/**
	 * Get the [custom7] column value.
	 * 
	 * @return     string
	 */
	public function getCustom7()
	{
		return $this->custom7;
	}

	/**
	 * Get the [custom8] column value.
	 * 
	 * @return     string
	 */
	public function getCustom8()
	{
		return $this->custom8;
	}

	/**
	 * Get the [custom9] column value.
	 * 
	 * @return     string
	 */
	public function getCustom9()
	{
		return $this->custom9;
	}

	/**
	 * Get the [custom10] column value.
	 * 
	 * @return     string
	 */
	public function getCustom10()
	{
		return $this->custom10;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ContactPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [slug] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setSlug($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->slug !== $v) {
			$this->slug = $v;
			$this->modifiedColumns[] = ContactPeer::SLUG;
		}

		return $this;
	} // setSlug()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = ContactPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = ContactPeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Set the value of [company] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCompany($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company !== $v) {
			$this->company = $v;
			$this->modifiedColumns[] = ContactPeer::COMPANY;
		}

		return $this;
	} // setCompany()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = ContactPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      int $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status !== $v) {
			$this->status = $v;
			$this->modifiedColumns[] = ContactPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Set the value of [external_reference] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setExternalReference($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->external_reference !== $v) {
			$this->external_reference = $v;
			$this->modifiedColumns[] = ContactPeer::EXTERNAL_REFERENCE;
		}

		return $this;
	} // setExternalReference()

	/**
	 * Set the value of [custom1] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCustom1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom1 !== $v) {
			$this->custom1 = $v;
			$this->modifiedColumns[] = ContactPeer::CUSTOM1;
		}

		return $this;
	} // setCustom1()

	/**
	 * Set the value of [custom2] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCustom2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom2 !== $v) {
			$this->custom2 = $v;
			$this->modifiedColumns[] = ContactPeer::CUSTOM2;
		}

		return $this;
	} // setCustom2()

	/**
	 * Set the value of [custom3] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCustom3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom3 !== $v) {
			$this->custom3 = $v;
			$this->modifiedColumns[] = ContactPeer::CUSTOM3;
		}

		return $this;
	} // setCustom3()

	/**
	 * Set the value of [custom4] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCustom4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom4 !== $v) {
			$this->custom4 = $v;
			$this->modifiedColumns[] = ContactPeer::CUSTOM4;
		}

		return $this;
	} // setCustom4()

	/**
	 * Set the value of [custom5] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCustom5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom5 !== $v) {
			$this->custom5 = $v;
			$this->modifiedColumns[] = ContactPeer::CUSTOM5;
		}

		return $this;
	} // setCustom5()

	/**
	 * Set the value of [custom6] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCustom6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom6 !== $v) {
			$this->custom6 = $v;
			$this->modifiedColumns[] = ContactPeer::CUSTOM6;
		}

		return $this;
	} // setCustom6()

	/**
	 * Set the value of [custom7] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCustom7($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom7 !== $v) {
			$this->custom7 = $v;
			$this->modifiedColumns[] = ContactPeer::CUSTOM7;
		}

		return $this;
	} // setCustom7()

	/**
	 * Set the value of [custom8] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCustom8($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom8 !== $v) {
			$this->custom8 = $v;
			$this->modifiedColumns[] = ContactPeer::CUSTOM8;
		}

		return $this;
	} // setCustom8()

	/**
	 * Set the value of [custom9] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCustom9($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom9 !== $v) {
			$this->custom9 = $v;
			$this->modifiedColumns[] = ContactPeer::CUSTOM9;
		}

		return $this;
	} // setCustom9()

	/**
	 * Set the value of [custom10] column.
	 * 
	 * @param      string $v new value
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCustom10($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom10 !== $v) {
			$this->custom10 = $v;
			$this->modifiedColumns[] = ContactPeer::CUSTOM10;
		}

		return $this;
	} // setCustom10()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ContactPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Contact The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ContactPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->slug = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->first_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->last_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->company = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->email = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->status = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->external_reference = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->custom1 = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->custom2 = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->custom3 = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->custom4 = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->custom5 = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->custom6 = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->custom7 = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->custom8 = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->custom9 = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->custom10 = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->created_at = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->updated_at = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 20; // 20 = ContactPeer::NUM_COLUMNS - ContactPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Contact object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ContactPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ContactPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collContactContactGroups = null;
			$this->lastContactContactGroupCriteria = null;

			$this->collCampaignContacts = null;
			$this->lastCampaignContactCriteria = null;

			$this->collCampaignContactElements = null;
			$this->lastCampaignContactElementCriteria = null;

			$this->collWebVisitors = null;
			$this->lastWebVisitorCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ContactPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseContact:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ContactPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseContact:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ContactPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseContact:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(ContactPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(ContactPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseContact:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ContactPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ContactPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ContactPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ContactPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collContactContactGroups !== null) {
				foreach ($this->collContactContactGroups as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCampaignContacts !== null) {
				foreach ($this->collCampaignContacts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCampaignContactElements !== null) {
				foreach ($this->collCampaignContactElements as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collWebVisitors !== null) {
				foreach ($this->collWebVisitors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ContactPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collContactContactGroups !== null) {
					foreach ($this->collContactContactGroups as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCampaignContacts !== null) {
					foreach ($this->collCampaignContacts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCampaignContactElements !== null) {
					foreach ($this->collCampaignContactElements as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collWebVisitors !== null) {
					foreach ($this->collWebVisitors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ContactPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getSlug();
				break;
			case 2:
				return $this->getFirstName();
				break;
			case 3:
				return $this->getLastName();
				break;
			case 4:
				return $this->getCompany();
				break;
			case 5:
				return $this->getEmail();
				break;
			case 6:
				return $this->getStatus();
				break;
			case 7:
				return $this->getExternalReference();
				break;
			case 8:
				return $this->getCustom1();
				break;
			case 9:
				return $this->getCustom2();
				break;
			case 10:
				return $this->getCustom3();
				break;
			case 11:
				return $this->getCustom4();
				break;
			case 12:
				return $this->getCustom5();
				break;
			case 13:
				return $this->getCustom6();
				break;
			case 14:
				return $this->getCustom7();
				break;
			case 15:
				return $this->getCustom8();
				break;
			case 16:
				return $this->getCustom9();
				break;
			case 17:
				return $this->getCustom10();
				break;
			case 18:
				return $this->getCreatedAt();
				break;
			case 19:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ContactPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getSlug(),
			$keys[2] => $this->getFirstName(),
			$keys[3] => $this->getLastName(),
			$keys[4] => $this->getCompany(),
			$keys[5] => $this->getEmail(),
			$keys[6] => $this->getStatus(),
			$keys[7] => $this->getExternalReference(),
			$keys[8] => $this->getCustom1(),
			$keys[9] => $this->getCustom2(),
			$keys[10] => $this->getCustom3(),
			$keys[11] => $this->getCustom4(),
			$keys[12] => $this->getCustom5(),
			$keys[13] => $this->getCustom6(),
			$keys[14] => $this->getCustom7(),
			$keys[15] => $this->getCustom8(),
			$keys[16] => $this->getCustom9(),
			$keys[17] => $this->getCustom10(),
			$keys[18] => $this->getCreatedAt(),
			$keys[19] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ContactPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setSlug($value);
				break;
			case 2:
				$this->setFirstName($value);
				break;
			case 3:
				$this->setLastName($value);
				break;
			case 4:
				$this->setCompany($value);
				break;
			case 5:
				$this->setEmail($value);
				break;
			case 6:
				$this->setStatus($value);
				break;
			case 7:
				$this->setExternalReference($value);
				break;
			case 8:
				$this->setCustom1($value);
				break;
			case 9:
				$this->setCustom2($value);
				break;
			case 10:
				$this->setCustom3($value);
				break;
			case 11:
				$this->setCustom4($value);
				break;
			case 12:
				$this->setCustom5($value);
				break;
			case 13:
				$this->setCustom6($value);
				break;
			case 14:
				$this->setCustom7($value);
				break;
			case 15:
				$this->setCustom8($value);
				break;
			case 16:
				$this->setCustom9($value);
				break;
			case 17:
				$this->setCustom10($value);
				break;
			case 18:
				$this->setCreatedAt($value);
				break;
			case 19:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ContactPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setSlug($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFirstName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setLastName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCompany($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setEmail($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setStatus($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setExternalReference($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setCustom1($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCustom2($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCustom3($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCustom4($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCustom5($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCustom6($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCustom7($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCustom8($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCustom9($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCustom10($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCreatedAt($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setUpdatedAt($arr[$keys[19]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ContactPeer::DATABASE_NAME);

		if ($this->isColumnModified(ContactPeer::ID)) $criteria->add(ContactPeer::ID, $this->id);
		if ($this->isColumnModified(ContactPeer::SLUG)) $criteria->add(ContactPeer::SLUG, $this->slug);
		if ($this->isColumnModified(ContactPeer::FIRST_NAME)) $criteria->add(ContactPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(ContactPeer::LAST_NAME)) $criteria->add(ContactPeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(ContactPeer::COMPANY)) $criteria->add(ContactPeer::COMPANY, $this->company);
		if ($this->isColumnModified(ContactPeer::EMAIL)) $criteria->add(ContactPeer::EMAIL, $this->email);
		if ($this->isColumnModified(ContactPeer::STATUS)) $criteria->add(ContactPeer::STATUS, $this->status);
		if ($this->isColumnModified(ContactPeer::EXTERNAL_REFERENCE)) $criteria->add(ContactPeer::EXTERNAL_REFERENCE, $this->external_reference);
		if ($this->isColumnModified(ContactPeer::CUSTOM1)) $criteria->add(ContactPeer::CUSTOM1, $this->custom1);
		if ($this->isColumnModified(ContactPeer::CUSTOM2)) $criteria->add(ContactPeer::CUSTOM2, $this->custom2);
		if ($this->isColumnModified(ContactPeer::CUSTOM3)) $criteria->add(ContactPeer::CUSTOM3, $this->custom3);
		if ($this->isColumnModified(ContactPeer::CUSTOM4)) $criteria->add(ContactPeer::CUSTOM4, $this->custom4);
		if ($this->isColumnModified(ContactPeer::CUSTOM5)) $criteria->add(ContactPeer::CUSTOM5, $this->custom5);
		if ($this->isColumnModified(ContactPeer::CUSTOM6)) $criteria->add(ContactPeer::CUSTOM6, $this->custom6);
		if ($this->isColumnModified(ContactPeer::CUSTOM7)) $criteria->add(ContactPeer::CUSTOM7, $this->custom7);
		if ($this->isColumnModified(ContactPeer::CUSTOM8)) $criteria->add(ContactPeer::CUSTOM8, $this->custom8);
		if ($this->isColumnModified(ContactPeer::CUSTOM9)) $criteria->add(ContactPeer::CUSTOM9, $this->custom9);
		if ($this->isColumnModified(ContactPeer::CUSTOM10)) $criteria->add(ContactPeer::CUSTOM10, $this->custom10);
		if ($this->isColumnModified(ContactPeer::CREATED_AT)) $criteria->add(ContactPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(ContactPeer::UPDATED_AT)) $criteria->add(ContactPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ContactPeer::DATABASE_NAME);

		$criteria->add(ContactPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Contact (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setSlug($this->slug);

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setCompany($this->company);

		$copyObj->setEmail($this->email);

		$copyObj->setStatus($this->status);

		$copyObj->setExternalReference($this->external_reference);

		$copyObj->setCustom1($this->custom1);

		$copyObj->setCustom2($this->custom2);

		$copyObj->setCustom3($this->custom3);

		$copyObj->setCustom4($this->custom4);

		$copyObj->setCustom5($this->custom5);

		$copyObj->setCustom6($this->custom6);

		$copyObj->setCustom7($this->custom7);

		$copyObj->setCustom8($this->custom8);

		$copyObj->setCustom9($this->custom9);

		$copyObj->setCustom10($this->custom10);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getContactContactGroups() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addContactContactGroup($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCampaignContacts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCampaignContact($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCampaignContactElements() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCampaignContactElement($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getWebVisitors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addWebVisitor($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Contact Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ContactPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ContactPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collContactContactGroups collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addContactContactGroups()
	 */
	public function clearContactContactGroups()
	{
		$this->collContactContactGroups = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collContactContactGroups collection (array).
	 *
	 * By default this just sets the collContactContactGroups collection to an empty array (like clearcollContactContactGroups());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initContactContactGroups()
	{
		$this->collContactContactGroups = array();
	}

	/**
	 * Gets an array of ContactContactGroup objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Contact has previously been saved, it will retrieve
	 * related ContactContactGroups from storage. If this Contact is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ContactContactGroup[]
	 * @throws     PropelException
	 */
	public function getContactContactGroups($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collContactContactGroups === null) {
			if ($this->isNew()) {
			   $this->collContactContactGroups = array();
			} else {

				$criteria->add(ContactContactGroupPeer::CONTACT_ID, $this->id);

				ContactContactGroupPeer::addSelectColumns($criteria);
				$this->collContactContactGroups = ContactContactGroupPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ContactContactGroupPeer::CONTACT_ID, $this->id);

				ContactContactGroupPeer::addSelectColumns($criteria);
				if (!isset($this->lastContactContactGroupCriteria) || !$this->lastContactContactGroupCriteria->equals($criteria)) {
					$this->collContactContactGroups = ContactContactGroupPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastContactContactGroupCriteria = $criteria;
		return $this->collContactContactGroups;
	}

	/**
	 * Returns the number of related ContactContactGroup objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ContactContactGroup objects.
	 * @throws     PropelException
	 */
	public function countContactContactGroups(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collContactContactGroups === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ContactContactGroupPeer::CONTACT_ID, $this->id);

				$count = ContactContactGroupPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ContactContactGroupPeer::CONTACT_ID, $this->id);

				if (!isset($this->lastContactContactGroupCriteria) || !$this->lastContactContactGroupCriteria->equals($criteria)) {
					$count = ContactContactGroupPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collContactContactGroups);
				}
			} else {
				$count = count($this->collContactContactGroups);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ContactContactGroup object to this object
	 * through the ContactContactGroup foreign key attribute.
	 *
	 * @param      ContactContactGroup $l ContactContactGroup
	 * @return     void
	 * @throws     PropelException
	 */
	public function addContactContactGroup(ContactContactGroup $l)
	{
		if ($this->collContactContactGroups === null) {
			$this->initContactContactGroups();
		}
		if (!in_array($l, $this->collContactContactGroups, true)) { // only add it if the **same** object is not already associated
			array_push($this->collContactContactGroups, $l);
			$l->setContact($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Contact is new, it will return
	 * an empty collection; or if this Contact has previously
	 * been saved, it will retrieve related ContactContactGroups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Contact.
	 */
	public function getContactContactGroupsJoinContactGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collContactContactGroups === null) {
			if ($this->isNew()) {
				$this->collContactContactGroups = array();
			} else {

				$criteria->add(ContactContactGroupPeer::CONTACT_ID, $this->id);

				$this->collContactContactGroups = ContactContactGroupPeer::doSelectJoinContactGroup($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ContactContactGroupPeer::CONTACT_ID, $this->id);

			if (!isset($this->lastContactContactGroupCriteria) || !$this->lastContactContactGroupCriteria->equals($criteria)) {
				$this->collContactContactGroups = ContactContactGroupPeer::doSelectJoinContactGroup($criteria, $con, $join_behavior);
			}
		}
		$this->lastContactContactGroupCriteria = $criteria;

		return $this->collContactContactGroups;
	}

	/**
	 * Clears out the collCampaignContacts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCampaignContacts()
	 */
	public function clearCampaignContacts()
	{
		$this->collCampaignContacts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCampaignContacts collection (array).
	 *
	 * By default this just sets the collCampaignContacts collection to an empty array (like clearcollCampaignContacts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCampaignContacts()
	{
		$this->collCampaignContacts = array();
	}

	/**
	 * Gets an array of CampaignContact objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Contact has previously been saved, it will retrieve
	 * related CampaignContacts from storage. If this Contact is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CampaignContact[]
	 * @throws     PropelException
	 */
	public function getCampaignContacts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampaignContacts === null) {
			if ($this->isNew()) {
			   $this->collCampaignContacts = array();
			} else {

				$criteria->add(CampaignContactPeer::CONTACT_ID, $this->id);

				CampaignContactPeer::addSelectColumns($criteria);
				$this->collCampaignContacts = CampaignContactPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CampaignContactPeer::CONTACT_ID, $this->id);

				CampaignContactPeer::addSelectColumns($criteria);
				if (!isset($this->lastCampaignContactCriteria) || !$this->lastCampaignContactCriteria->equals($criteria)) {
					$this->collCampaignContacts = CampaignContactPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCampaignContactCriteria = $criteria;
		return $this->collCampaignContacts;
	}

	/**
	 * Returns the number of related CampaignContact objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CampaignContact objects.
	 * @throws     PropelException
	 */
	public function countCampaignContacts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCampaignContacts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CampaignContactPeer::CONTACT_ID, $this->id);

				$count = CampaignContactPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CampaignContactPeer::CONTACT_ID, $this->id);

				if (!isset($this->lastCampaignContactCriteria) || !$this->lastCampaignContactCriteria->equals($criteria)) {
					$count = CampaignContactPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCampaignContacts);
				}
			} else {
				$count = count($this->collCampaignContacts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CampaignContact object to this object
	 * through the CampaignContact foreign key attribute.
	 *
	 * @param      CampaignContact $l CampaignContact
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCampaignContact(CampaignContact $l)
	{
		if ($this->collCampaignContacts === null) {
			$this->initCampaignContacts();
		}
		if (!in_array($l, $this->collCampaignContacts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCampaignContacts, $l);
			$l->setContact($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Contact is new, it will return
	 * an empty collection; or if this Contact has previously
	 * been saved, it will retrieve related CampaignContacts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Contact.
	 */
	public function getCampaignContactsJoinCampaign($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampaignContacts === null) {
			if ($this->isNew()) {
				$this->collCampaignContacts = array();
			} else {

				$criteria->add(CampaignContactPeer::CONTACT_ID, $this->id);

				$this->collCampaignContacts = CampaignContactPeer::doSelectJoinCampaign($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CampaignContactPeer::CONTACT_ID, $this->id);

			if (!isset($this->lastCampaignContactCriteria) || !$this->lastCampaignContactCriteria->equals($criteria)) {
				$this->collCampaignContacts = CampaignContactPeer::doSelectJoinCampaign($criteria, $con, $join_behavior);
			}
		}
		$this->lastCampaignContactCriteria = $criteria;

		return $this->collCampaignContacts;
	}

	/**
	 * Clears out the collCampaignContactElements collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCampaignContactElements()
	 */
	public function clearCampaignContactElements()
	{
		$this->collCampaignContactElements = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCampaignContactElements collection (array).
	 *
	 * By default this just sets the collCampaignContactElements collection to an empty array (like clearcollCampaignContactElements());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCampaignContactElements()
	{
		$this->collCampaignContactElements = array();
	}

	/**
	 * Gets an array of CampaignContactElement objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Contact has previously been saved, it will retrieve
	 * related CampaignContactElements from storage. If this Contact is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CampaignContactElement[]
	 * @throws     PropelException
	 */
	public function getCampaignContactElements($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampaignContactElements === null) {
			if ($this->isNew()) {
			   $this->collCampaignContactElements = array();
			} else {

				$criteria->add(CampaignContactElementPeer::CONTACT_ID, $this->id);

				CampaignContactElementPeer::addSelectColumns($criteria);
				$this->collCampaignContactElements = CampaignContactElementPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CampaignContactElementPeer::CONTACT_ID, $this->id);

				CampaignContactElementPeer::addSelectColumns($criteria);
				if (!isset($this->lastCampaignContactElementCriteria) || !$this->lastCampaignContactElementCriteria->equals($criteria)) {
					$this->collCampaignContactElements = CampaignContactElementPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCampaignContactElementCriteria = $criteria;
		return $this->collCampaignContactElements;
	}

	/**
	 * Returns the number of related CampaignContactElement objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CampaignContactElement objects.
	 * @throws     PropelException
	 */
	public function countCampaignContactElements(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCampaignContactElements === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CampaignContactElementPeer::CONTACT_ID, $this->id);

				$count = CampaignContactElementPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CampaignContactElementPeer::CONTACT_ID, $this->id);

				if (!isset($this->lastCampaignContactElementCriteria) || !$this->lastCampaignContactElementCriteria->equals($criteria)) {
					$count = CampaignContactElementPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCampaignContactElements);
				}
			} else {
				$count = count($this->collCampaignContactElements);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CampaignContactElement object to this object
	 * through the CampaignContactElement foreign key attribute.
	 *
	 * @param      CampaignContactElement $l CampaignContactElement
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCampaignContactElement(CampaignContactElement $l)
	{
		if ($this->collCampaignContactElements === null) {
			$this->initCampaignContactElements();
		}
		if (!in_array($l, $this->collCampaignContactElements, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCampaignContactElements, $l);
			$l->setContact($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Contact is new, it will return
	 * an empty collection; or if this Contact has previously
	 * been saved, it will retrieve related CampaignContactElements from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Contact.
	 */
	public function getCampaignContactElementsJoinCampaign($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampaignContactElements === null) {
			if ($this->isNew()) {
				$this->collCampaignContactElements = array();
			} else {

				$criteria->add(CampaignContactElementPeer::CONTACT_ID, $this->id);

				$this->collCampaignContactElements = CampaignContactElementPeer::doSelectJoinCampaign($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CampaignContactElementPeer::CONTACT_ID, $this->id);

			if (!isset($this->lastCampaignContactElementCriteria) || !$this->lastCampaignContactElementCriteria->equals($criteria)) {
				$this->collCampaignContactElements = CampaignContactElementPeer::doSelectJoinCampaign($criteria, $con, $join_behavior);
			}
		}
		$this->lastCampaignContactElementCriteria = $criteria;

		return $this->collCampaignContactElements;
	}

	/**
	 * Clears out the collWebVisitors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addWebVisitors()
	 */
	public function clearWebVisitors()
	{
		$this->collWebVisitors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collWebVisitors collection (array).
	 *
	 * By default this just sets the collWebVisitors collection to an empty array (like clearcollWebVisitors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initWebVisitors()
	{
		$this->collWebVisitors = array();
	}

	/**
	 * Gets an array of WebVisitor objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Contact has previously been saved, it will retrieve
	 * related WebVisitors from storage. If this Contact is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array WebVisitor[]
	 * @throws     PropelException
	 */
	public function getWebVisitors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collWebVisitors === null) {
			if ($this->isNew()) {
			   $this->collWebVisitors = array();
			} else {

				$criteria->add(WebVisitorPeer::CONTACT_ID, $this->id);

				WebVisitorPeer::addSelectColumns($criteria);
				$this->collWebVisitors = WebVisitorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(WebVisitorPeer::CONTACT_ID, $this->id);

				WebVisitorPeer::addSelectColumns($criteria);
				if (!isset($this->lastWebVisitorCriteria) || !$this->lastWebVisitorCriteria->equals($criteria)) {
					$this->collWebVisitors = WebVisitorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastWebVisitorCriteria = $criteria;
		return $this->collWebVisitors;
	}

	/**
	 * Returns the number of related WebVisitor objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related WebVisitor objects.
	 * @throws     PropelException
	 */
	public function countWebVisitors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collWebVisitors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(WebVisitorPeer::CONTACT_ID, $this->id);

				$count = WebVisitorPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(WebVisitorPeer::CONTACT_ID, $this->id);

				if (!isset($this->lastWebVisitorCriteria) || !$this->lastWebVisitorCriteria->equals($criteria)) {
					$count = WebVisitorPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collWebVisitors);
				}
			} else {
				$count = count($this->collWebVisitors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a WebVisitor object to this object
	 * through the WebVisitor foreign key attribute.
	 *
	 * @param      WebVisitor $l WebVisitor
	 * @return     void
	 * @throws     PropelException
	 */
	public function addWebVisitor(WebVisitor $l)
	{
		if ($this->collWebVisitors === null) {
			$this->initWebVisitors();
		}
		if (!in_array($l, $this->collWebVisitors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collWebVisitors, $l);
			$l->setContact($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collContactContactGroups) {
				foreach ((array) $this->collContactContactGroups as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCampaignContacts) {
				foreach ((array) $this->collCampaignContacts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCampaignContactElements) {
				foreach ((array) $this->collCampaignContactElements as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collWebVisitors) {
				foreach ((array) $this->collWebVisitors as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collContactContactGroups = null;
		$this->collCampaignContacts = null;
		$this->collCampaignContactElements = null;
		$this->collWebVisitors = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseContact:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseContact::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseContact
