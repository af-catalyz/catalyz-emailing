<?php


/**
 * Skeleton subclass for representing a row from the 'contact_group' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * jeu. 03 mai 2012 11:26:43 CEST
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class ContactGroup extends BaseContactGroup {

	/**
	 * Initializes internal state of ContactGroup object.
	 * @see        parent::__construct()
	 */
	public function __construct()
	{
		// Make sure that parent constructor is always invoked, since that
		// is where any default values for this object are set.
		parent::__construct();
	}

	public function __toString(){
		return $this->name;
	}

	public function getCommentPopup(){
		if (trim($this->getLegend()) != '') {
			return sprintf('<a rel="tooltip-campaign-comment" href="#" data-original-title="%s"><i class="icon-question-sign"></i></a>', str_ireplace('"', '&quot;', nl2br($this->getLegend())));
		}

		return FALSE;
	}

	public function getColoredName($floating = false){
		$style = '';
		if ($this->getColor()) {
			$style = $this->getColor();
		}

		return sprintf('<span%s class="label %s">%s</span>',$floating?' style="float: left; margin: 0 2px 2px 2px;"':'',$style, $this->getName());
	}

	public function getOverviewAcrossTimeDatas()
	{
		$contacts = $this->getContactContactGroups();
		$return = array();

		foreach ($contacts as/*(ContactContactGroup)*/ $contact) {
			$time = mktime(0, 0, 0, $contact->getCreatedAt('m'), $contact->getCreatedAt('d'), $contact->getCreatedAt('Y'));
			if (isset($return[$time])) {
				$return[$time] ++ ;
			} else {
				$return[$time] = 1;
			}
		}

		ksort($return);

		$total = 0;
		foreach ($return as $date => $count) {
			$return[$date] += $total;
			$total += $count;
		}

		return $return;
	}

	public function getActiveContactIds()
	{
		$criteria = new Criteria();
		$criteria->addSelectColumn(ContactContactGroupPeer::CONTACT_ID);
		$criteria->setDistinct();
		$criteria->addJoin(CampaignContactGroupPeer::CONTACT_GROUP_ID, ContactGroupPeer::ID);
		$criteria->addJoin(ContactGroupPeer::ID, ContactContactGroupPeer::CONTACT_GROUP_ID);
		$criteria->addJoin(ContactContactGroupPeer::CONTACT_ID, ContactPeer::ID);
		$criteria->add(ContactPeer::STATUS, Contact::STATUS_NEW);
		$criteria->add(ContactContactGroupPeer::CONTACT_GROUP_ID, $this->getId());
		$result = array();

		$rs = BasePeer::doSelect($criteria);

		$rs->execute();

		while($row = $rs->fetch(PDO::FETCH_ASSOC)){
			$result[] = (int)$row['CONTACT_ID'];
		}

		return $result;
	}
} // ContactGroup


$columns_map = array('from'   => ContactGroupPeer::NAME,'to'     => ContactGroupPeer::SLUG);
sfPropelBehavior::add('ContactGroup', array('sfPropelActAsSluggableBehavior' => array('columns' => $columns_map)));