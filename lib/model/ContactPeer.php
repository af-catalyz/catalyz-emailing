<?php


/**
 * Skeleton subclass for performing query and update operations on the 'contact' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * jeu. 03 mai 2012 11:26:43 CEST
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class ContactPeer extends BaseContactPeer {
	static public function getFieldLabel($field)
	{
		$czSettings =/*(CatalyzSettings)*/ CatalyzSettings::instance();
		$customFields = $czSettings->get('contact.customsField', array());

		switch ($field) {
			case 'FULL_NAME':
				return 'Nom complet';
			case 'FIRST_NAME':
				return 'Prénom';
			case 'LAST_NAME':
				return 'Nom';
			case 'COMPANY':
				return 'Société';
			case 'EMAIL':
				return 'Email';
			case 'CREATED_AT':
				return 'Ajouté le';
			case 'UPDATED_AT':
				return 'Modifié le';
			case 'STATUS':
				return 'Statut';
			case 'GROUPS':
				return 'Groupes';
			default:
				if (preg_match('/^CUSTOM([1-9][0-9]?)$/', $field, $tokens)) {
					$tokens[1] = (int)$tokens[1];
					if ($tokens[1] > 0 && $tokens[1] <= sfConfig::get('app_fields_count')) {
						if (!empty($customFields['custom' . $tokens[1]])) {
							return $customFields['custom' . $tokens[1]];
						} else {
							return sfConfig::get('app_fields_custom' . $tokens[1], 'Champ personnalisé n°' . $tokens[1]);
						}
					}
				}

				return $field;
		} // switch
	}

	public static function retrieveBySlug($slug)
	{
		$criteria = new Criteria(ContactPeer::DATABASE_NAME);
		$criteria->add(ContactPeer::SLUG, $slug);

		$v = ContactPeer::doSelectOne($criteria);

		return $v;
	}

	static function getContactsGroupList()
	{
		$criteria = new Criteria();
		$criteria->addJoin(ContactGroupPeer::ID, ContactContactGroupPeer::CONTACT_GROUP_ID);
		$elements = ContactContactGroupPeer::doSelectJoinContactGroup($criteria);

		foreach ($elements as  /*(ContactContactGroup)*/ $ContactContactGroup){
			$group = /*(ContactGroup)*/$ContactContactGroup->getContactGroup();
			$return[$ContactContactGroup->getContactId()][$group->getId()]= html_entity_decode($group->getColoredName(true));
		}

		ksort($return);
		return $return;
	}

	static public function retrieveForSelect($q, $CampaignId , $selected = null)
	{
		$authors = array();
		if ($q != '') {
			$c = new Criteria();
			$c->add(CampaignContactPeer::CAMPAIGN_ID, $CampaignId);
			$contacts = CampaignContactPeer::doSelect($c);

			$notInTab = array();

			foreach ($contacts as $contact) {
				$notInTab[] = $contact->getId();
			}

			if ($selected) {
				foreach (explode(',', $selected) as $element) {
					if ((int)$element > 0) {
						$notInTab[] = (int)$element;
					}
				}
			}

			$criteria = new Criteria();

			$criterion = $criteria->getNewCriterion(ContactPeer::LAST_NAME, '%' . $q . '%', Criteria::LIKE);
			$criterion->addOr($criteria->getNewCriterion(ContactPeer::EMAIL, '%' . $q . '%', Criteria::LIKE));
			$criteria->add($criterion);

			$criterion->addOr($criteria->getNewCriterion(ContactPeer::FIRST_NAME, '%' . $q . '%', Criteria::LIKE));
			$criteria->add($criterion);

			//            $criterion->addOr($criteria->getNewCriterion(ContactPeer::EXTERNAL_REFERENCE, '%' . $q . '%', Criteria::LIKE));
			$criteria->add($criterion);

			for ($i = 1; $i <= sfConfig::get('app_fields_count'); $i++) {
				$criterion->addOr($criteria->getNewCriterion(constant('ContactPeer::CUSTOM' . $i), '%' . $q . '%', Criteria::LIKE));
				$criteria->add($criterion);
			}

			$criteria->add(ContactPeer::ID, $notInTab, Criteria::NOT_IN);
			$criteria->addAscendingOrderByColumn(ContactPeer::LAST_NAME);
			$criteria->setLimit(15);

			foreach (ContactPeer::doSelect($criteria) as $author) {
				$authors[$author->getId()] = sprintf('%s (%s)', (string) $author->getLastName(), (string) $author->getEmail()) ;
			}
		}
		return $authors;
	}
} // ContactPeer
